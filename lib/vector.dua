// TODO delete this
nomangle int printf(str message, ...);

i32& postfix[] (i32* ptr, i64 i)
{
    i64 offset = i * sizeof(i32);
    i64 addr = ptr;
    addr += offset;
    return *((i32*)addr);
}

class Vector<T>
{
    typealias size_t = long;

    size_t _size = 0;
    size_t capacity;
    T* buffer;

    constructor(size_t n)
    {
        buffer = new[n] T;
        capacity = n;
    }

    constructor() {
        constructor(2);
    }

    size_t size() { return _size; }

    void push(T t) {
        expand_if_needed();
        buffer[_size++] = t;
    }

    T pop() {
        if (_size == 0)
            printf("Can't pop an empty vector of %s\n", typename(T));
        _size--;
        T result = buffer[_size];
        shrink_if_possible();
        return result;
    }

    T& postfix [](size_t i) {
        if (i < 0)
            printf("Can't have a negative index\n");
        if (i >= _size)
            printf("Can't have an index bigger than the size\n");
        return buffer[i];
    }

    void expand_if_needed()
    {
        if (_size != capacity)
            return;

        T* temp = new[_size * 2] T;

        for (size_t i = 0; i < _size; i++) {
            temp[i] = buffer[i];
        }

        delete buffer;
        buffer = temp;

        _size *= 2;
    }

    void shrink_if_possible()
    {
        if (_size != capacity / 4)
            return;

        T* temp = new[capacity / 2] T;

        for (size_t i = 0; i < _size; i++) {
            temp[i] = buffer[i];
        }

        delete buffer;
        buffer = temp;

        _size = capacity / 4;
    }
}

