import "execution.dua"
import "algorithms.dua"

class Vector<T>
{
    typealias size_t = long;

    size_t _size = 0;
    size_t _capacity;
    T* buffer;
    bool _is_const_initialized = false;

    constructor(size_t n) : _capacity(n), buffer(n > 0 ? new[n] T : null)
    {
        if (n < 0) panic("The Vector class can't have negative size");
    }

    constructor(T* buffer, size_t size) : _size(size)
    {
        constructor(size);
        for (size_t i = 0; i < size; i++)
            self.buffer[i] = buffer[i];
    }

    constructor(T* buffer, size_t size, bool is_const, bool is_owned) : _is_const_initialized(is_const), _size(size)
    {
        if (is_const || is_owned) {
            self.buffer = buffer;
            _capacity = size;
        } else {
            constructor(buffer, size);
        }
    }

    constructor(size_t n, T value)
    {
        constructor(n);
        for (size_t i = 0; i < n; i++)
            buffer[i] = value;
        _size = n;
    }

    constructor() { constructor(2); }

    =constructor(Vector<T>& other)
    {
        self = other;
    }

    size_t size() { return _size; }

    size_t capacity() { return _capacity; }

    void push(T t)
    {
        expand_if_needed();
        mirror_memory<T>(buffer[_size++], t);
    }

    T pop()
    {
        if (_size == 0)
            panic("Can't pop an empty vector");

        // If the buffer refers to a constant memory,
        //  a new buffer must be allocated to modify it
        if (_is_const_initialized)
            alloc_new_buffer(_capacity);

        return teleport(buffer[--_size]);
    }

    T& postfix [](size_t i)
    {
        if (i < 0)
            panic("Can't have a negative index\n");

        if (i >= size())
            panic("Can't have an index bigger than the size\n");

        //  As of now, there is no way to tell whether the returned
        //  reference is going to be read from or written to, so this
        //  step is needed. Nevertheless, this would be useful for example
        //  in case of temporary string literals, which are just a temporary
        //  objects that won't be modified. Instead of copying them, wrap
        //  them with a String object without copying.
        if (_is_const_initialized)
            alloc_new_buffer(_capacity);

        return buffer[i];
    }

    void expand_if_needed()
    {
        if (_size == _capacity || _is_const_initialized)
            alloc_new_buffer(_size * 2);
    }

    void trim_to_fit()
    {
        if (_size > 0)
            alloc_new_buffer(_size);
    }

    void alloc_new_buffer(size_t new_capacity)
    {
        if (new_capacity <= 0)
            panic("Cannot allocate a non-positive-sized buffer");

        T* temp = new[new_capacity] T;

        size_t n = _size < new_capacity ? _size : new_capacity;

        for (size_t i = 0; i < n; i++) {
            // To avoid calling the destructor on temp[i]
            mirror_memory<T>(temp[i], buffer[i]);
        }

        free_buffer();
        buffer = temp;

        _capacity = new_capacity;

        _is_const_initialized = false;
    }

    void resize(size_t new_size)
    {
        if (new_size <= 0)
            panic("Cannot resize to a non-positive size");

        if (new_size > _capacity)
            alloc_new_buffer(new_size);

        for (size_t i = _size; i < new_size; i++)
            construct(buffer[i]);

        _size = new_size;
    }

    void reserve(size_t amount)
    {
        if (amount <= 0)
            panic("Cannot reserve a non-positive amount");

        if (amount <= _capacity)
            return;

        alloc_new_buffer(amount);
    }

    Vector<T>& infix =(Vector<T>& other)
    {
        if (&other == &self) return self;

        if (other.is_empty()) {
            clear();
            return self;
        }

        if (other._is_const_initialized)
        {
            free_buffer();
            buffer = other.buffer;
            _size = other._size;
            _capacity = other._capacity;
        }
        else
        {
            destruct_elements();
            resize(other._size);

            // Don't set _size and _capacity. the resize method will set
            //  them as appropriate (_capacity might remain bigger than
            //  other._capacity)

            // To avoid calling the destructor on buffer[i] when assigning
            for (size_t i = 0; i < other._size; i++) {
                T copy = other.buffer[i];
                mirror_memory<T>(buffer[i], move(copy));
            }
        }

        _is_const_initialized = other._is_const_initialized;

        return self;
    }

    // Sorting can't be embed in the vector class because this
    //  would require types stored in the class to have the
    //  operators necessary for comparison be defined, which
    //  is not needed if the class is going to be used just
    //  for storing elements, regardless of their order.
    void sort<Comparator>() {
        sort<T, Comparator>(buffer, size());
    }

    void shuffle() {
        shuffle<T>(buffer, size());
    }

    void reverse() {
        reverse<T>(buffer, size());
    }

    bool is_empty() { return size() == 0; }

    destructor
    {
        destruct_elements();
        free_buffer();
    }

    void destruct_elements()
    {
        // Const pointers are in a read-only
        //  memory, and shouldn't be deleted
        if (_is_const_initialized) return;

        for (size_t i = 0; i < size(); i++)
            destruct(buffer[i]);
    }

    void clear()
    {
        destruct_elements();
        _size -= size();
    }

    T remove(size_t index)
    {
        if (index < 0)
            panic("Can't remove at a negative index");

        if (index >= size())
            panic("Can't remove at an index bigger than the size");

        T removed = teleport(buffer[index]);

        for (size_t i = index; i < _size - 1; i++) {
            // To avoid calling the destructor on buffer[i]
            mirror_memory<T>(buffer[i], buffer[i + 1]);
        }

        _size--;

        return teleport(removed);
    }

    void free_buffer()
    {
        // Const pointers are in a read-only
        //  memory, and shouldn't be deleted
        if (_is_const_initialized)
            return;

        // Deleting with _RAW_ instead of delete to avoid
        //  calling the destructor on every position
        //  in the buffer, even if it's not occupied
        _RAW_ delete[] buffer;
    }
}