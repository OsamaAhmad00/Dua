// TODO delete this
nomangle int printf(str message, ...);

class Vector<T>
{
    typealias size_t = long;

    size_t _size = 0;
    size_t _capacity;
    T* buffer;

    constructor(size_t n) : _capacity(n), buffer(new[n] T) { }

    constructor() { constructor(2); }

    size_t size() { return _size; }

    size_t capacity() { return _capacity; }

    void push(T t) {
        expand_if_needed();
        // printf("Pushing %d\n", t);
        buffer[_size++] = t;
    }

    T pop() {
        if (_size == 0)
            printf("Can't pop an empty vector of %s\n", typename(T));
        return buffer[--_size];
    }

    T& postfix [](size_t i) {
        if (i < 0)
            printf("Can't have a negative index\n");
        if (i >= _size)
            printf("Can't have an index bigger than the size\n");
        return buffer[i];
    }

    void expand_if_needed()
    {
        if (_size == _capacity)
            alloc_new_buffer(_size * 2);
    }

    void trim_to_fit()
    {
        alloc_new_buffer(_size);
    }

    void alloc_new_buffer(size_t new_capacity)
    {
        T* temp = new[new_capacity] T;

        for (size_t i = 0; i < _size; i++)
            temp[i] = buffer[i];

        delete buffer;
        buffer = temp;

        _capacity = new_capacity;
    }
}

