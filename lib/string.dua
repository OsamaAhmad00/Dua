import "vector.dua"

nomangle long strlen(str string);

class String : Vector<i8>
{
    typealias size_t = long;

    constructor(str string) : Super(strlen(string) + 1)
    {
        for (size_t i = 0; i < capacity(); i++)
            buffer[i] = string[i];
        _size = capacity() - 1;
        buffer[size()] = 0;
    }

    String substring(size_t from, size_t upto)
    {
        size_t n = upto - from;

        var temp = new[n + 1] byte;

        for (size_t i = 0; i < n; i++)
            temp[i] = self[from + i];

        String result(temp);

        delete temp;

        return result;
    }

    String infix +(String other)
    {
        return self + other.buffer;
    }

    String infix +(str other)
    {
        size_t self_size = size();
        size_t other_size = strlen(other);

        size_t sum = self_size + other_size;

        str temp = new[self_size + other_size + 1] byte;

        for (long i = 0; i < self_size; i++)
            temp[i] = self[i];
        for (long i = 0; i < other_size; i++)
            temp[self_size + i] = other[i];
        temp[sum] = 0;

        String result(temp);

        delete temp;

        return result;
    }

    str c_str() { return buffer; }
}

String infix +(str other, String self)
{
    long self_size = self.size();
    long other_size = strlen(other);

    long sum = self_size + other_size;
    str temp = new[sum + 1] byte;

    for (long i = 0; i < other_size; i++)
        temp[i] = other[i];
    for (long i = 0; i < self_size; i++)
        temp[i + other_size] = self[i];
    temp[sum] = 0;

    String result(temp);

    delete temp;

    return result;
}
