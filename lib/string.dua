import "vector.dua"

import "io.dua"

nomangle long strlen(str string);

class String : Vector<i8>
{
    typealias size_t = long;

    constructor() : Super(2)
    {
        buffer[0] = '\0';
        _size = 1;
    }

    constructor(str string) : Super(strlen(string) + 1)
    {
        for (size_t i = 0; i < _capacity; i++)
            buffer[i] = string[i];
        _size = _capacity;
        buffer[_size] = '\0';
    }

    constructor(size_t n, byte c) : Super(n + 1, c)
    {
        buffer[n] = '\0';
    }

    constructor(str string, size_t n, bool is_const, bool is_owned) : Super(string, n, is_const, is_owned)
    {
        // This assumes that the string is already null terminated
    }

    constructor(str string, bool is_const, bool is_owned)
    {
        constructor(string, strlen(string) + 1, is_const, is_owned);
    }

    =constructor(String& string)
    {
        self = string;
    }

    =constructor(str string)
    {
        self = string;
    }

    void push(byte c)
    {
        expand_if_needed();
        buffer[_size - 1] = c;
        buffer[_size++] = '\0';
    }

    byte pop()
    {
        // Can't pop the null terminator
        if (_size == 1)
            panic("Can't pop an empty string");

        // If the buffer refers to a constant memory,
        //  a new buffer must be allocated to modify it
        if (_is_const_initialized)
            alloc_new_buffer(_capacity);

        byte result = buffer[_size - 2];

        buffer[--_size - 1] = '\0';

        return result;
    }

    String substring(size_t from, size_t upto)
    {
        size_t n = upto - from;

        var buffer = new[n + 1] byte;

        for (size_t i = 0; i < n; i++)
            buffer[i] = self[from + i];

        return (buffer, false, true)String;
    }

    // Excluding the null terminator
    size_t size() { return _size - 1; }
    size_t capacity() { return _capacity - 1; }

    str c_str() { return buffer; }

    void resize(size_t new_size)
    {
        // Accounting for the null terminator
        Vector<byte>::resize(self, new_size + 1);
        self[new_size] = '\0';
    }

    String& infix =(str string)
    {
        size_t len = strlen(string);
        resize(len);
        for (size_t i = 0; i < len; i++)
            self[i] = string[i];
        return self;
    }

    String infix +(String& other)
    {
        return self + other.buffer;
    }

    String infix +(str other)
    {
        size_t self_size = size();
        size_t other_size = strlen(other);

        size_t sum = self_size + other_size;

        str buffer = new[self_size + other_size + 1] byte;

        for (long i = 0; i < self_size; i++)
            buffer[i] = self[i];
        for (long i = 0; i < other_size; i++)
            buffer[self_size + i] = other[i];
        buffer[sum] = '\0';

        return (buffer, false, true)String;
    }

    String& infix +=(String& other)
    {
        return self += other.buffer;
    }

    String& infix +=(str other)
    {
        size_t self_size = size();
        size_t other_size = strlen(other);

        size_t sum = self_size + other_size;
        resize(sum);

        for (size_t i = 0; i < other_size; i++)
            self[self_size + i] = other[i];

        return self;
    }
}

InputStream& infix >>(InputStream& stream, String& string)
{
    stream.scan_buffer(stream.buffer, __INPUT_STREAM_BUFFER_LEN);

    // This is to not be limited by
    //  the buffer size of the string.
    string = stream.buffer;

    return stream;
}

OutputStream& infix <<(OutputStream& stream, String& string)
{
    return stream << string.buffer;
}

String infix +(str other, String& self)
{
    long self_size = self.size();
    long other_size = strlen(other);

    long sum = self_size + other_size;
    str buffer = new[sum + 1] byte;

    for (long i = 0; i < other_size; i++)
        buffer[i] = other[i];
    for (long i = 0; i < self_size; i++)
        buffer[i + other_size] = self[i];
    buffer[sum] = '\0';

    return (buffer, false, true)String;
}