nomangle int printf(str message, ...);

void print(int num) { printf("%d", num); }

// CASE Basic declaration
// Returns 1

int main()
{
    int y;
    y = 1;
    return y;
}


// CASE Basic definition
// Returns 4

int main()
{
    int z = 4;
    return z;
}


// CASE Definition with an assignment
// Returns 5

int main()
{
    int x;  // declaration
    x = 1;
    int y = 4;  // definition
    int z = x + y;
    return z;
}


// CASE Name shadowing
// Returns 10

int d = 4;

int main()
{
    int result;

    // Shadows the global d
    int d = 5;
    {
        // Shadows both d's
        int d(10);
        result = d;
    }

    return result;
}


// CASE Global default values
// Returns 0

// Globals default to be zero-initialized.
int d;

int main()
{
    return d;
}


// CASE Global variable initialization with non-constant expression
// Returns 5

int fib(int i)
{
    if (i <= 1) return 1;
    return fib(i - 1) + fib(i - 2);
}

int f = fib(4);

int main()
{
    return f;
}

// CASE Redefinition in the same scope
// Panics

int d;

int main()
{
    // No problem.
    int d;

    {
        // No problem.
        int d;
        // Semantic Error: Redefinition of the variable d in the same scope.
        int d;
    }
}


// CASE Addresses
// Outputs "123"

int main()
{
    int x = 1;
    var p = &x;
    var pp(&p);
    var ppp = &pp;

    print(x);
    *p = 2;
    print(**pp);
    ****(&ppp) = 3;
    print(*p);
}


// Case Address of a reference
// Outputs "1"

int* get_addr(int& i) {
    return &i;
}

int main()
{
    int i;
    int& ii = i;
    int b = &i == get_addr(ii);
    printf("%d", b);
}


// Case Passing a reference type by value
// Outputs "3"

void func(int i)
{
    printf("%d", i);
}

int main()
{
    int i = 3;
    int& ii = i;
    func(ii);
}


// TODO Extern global variable

// Needs the ability to compile and link another file along with it
//
// extern int i;
//
// int main()
// {
//     i = 3;
// }


// TODO Static global variable

// Needs the ability to compile and link another file along with it
//
// static int i;
//
// int main()
// {
//     i = 3;
// }


// Case Extern local variable
// Panics

int main()
{
    extern int i;
}


// Case Initializing an extern global variable
// Panics

extern int i = 3;

int main()
{

}


// Case Initializing a global variable as both static and extern
// Panics

extern static int i;

int main()
{

}


// Case Order of destruction
// Outputs "54321"

class X
{
    int i;

    constructor(int i) : i(i) { }

    destructor { print(i); }
}

int main()
{
    X x1(1);
    X x2(2);
    X x3(3);
    X x4(4);
    X x5(5);
}