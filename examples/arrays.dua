nomangle int printf(str message, ...);


// Case Creating an array

int main()
{
    int[5] arr;
}


// Case Default value
// Outputs "00000"

int main()
{
    int[5] arr;

    for (int i = 0; i < 5; i++)
        printf("%d", arr[i]);
}


// Case Default value, multi-dimensional
// Outputs "000000000000000000000000"

int main()
{
    int[2][3][4] arr;

    for (int i = 0; i < 4; i++)
        for (int j = 0; j < 3; j++)
            for (int k = 0; k < 2; k++)
                printf("%d", arr[i][j][k]);
}


// Case Single-dimensional arrays
// Outputs "0123456789"

int main()
{
    int[10] arr;

    for (int i = 0; i < 10; i++)
        arr[9 - i] = i;

    for (int i = 9; i >= 0; i--)
        printf("%d", arr[i]);
}


// Case Multi-dimensional arrays
// Outputs "121236"

int main()
{
    int[10][5] arr;

    for (int i = 0; i < 5; i++)
        for (int j = 0; j < 10; j++)
            arr[i][j] = i * j;

    printf("%d%d%d", arr[3][4], arr[2][6], arr[4][9]);
}


// Case Array literals
// Outputs "12345"

int main()
{
    var arr = long { 1, 2, 3, 4, 5 };
    for (int i = 0; i < 5; i++)
        printf("%lld", arr[i]);
}


// Case Array literals with implicit cast
// Outputs "12345"

int main()
{
    var arr = int { 1.22, 2, 3S, 4, 5 };
    for (int i = 0; i < 5; i++)
        printf("%d", arr[i]);
}


// Case Passing a multi-dimensional array element by reference
// Outputs "5"

void func(int& i)
{
    i = 5;
}

int main()
{
    int[3][3] arr;
    func(arr[2][2]);
    printf("%d", arr[2][2]);
}


// Case Initializing a multi-dimensional array of objects
// Outputs "555555555555"

class X
{
    int i = 1;

    constructor(int i) : i(i) { }
}

int main()
{
    X[3][4] arr(5);

    for (int i = 0; i < 4; i++)
        for (int j = 0; j < 3; j++)
            printf("%d", arr[i][j].i);
}


// Case Default initializing a multi-dimensional array of objects
// Outputs "111111111111"

class X
{
    int i = 1;
}

int main()
{
    X[3][4] arr;

    for (int i = 0; i < 4; i++)
        for (int j = 0; j < 3; j++)
            printf("%d", arr[i][j].i);
}


// Case Destruction of a multi-dimensional array of objects
// Outputs "CCCCCCDDDDDD"

class X
{
    constructor() { printf("C"); }
    destructor    { printf("D"); }
}

int main()
{
    X[3][2] arr;
}


// Case Implicit return of an array of integers
// Outputs "00000"

int[5] func() {
    // No return statement. An implicit return
    // with the default value will be returned,
    // and a warning will be reported
}

int main()
{
    var arr = func();
    for (int i = 0; i < 5; i++)
        printf("%d", arr[i]);
}


// Case Implicit return of an array of objects
// Outputs "CCCCCDDDDD"

class X
{
    constructor() { printf("C"); }
    destructor    { printf("D"); }
}

X[5] func() {
    // No return statement. An implicit return
    // with the default value will be returned,
    // and a warning will be reported
}

int main()
{
    var arr = func();
}


// Case Default-initializing an array of objects with no default constructor
// Panics

class X
{
    constructor(int i) { }
}

int main()
{
    X[5] arr;
}


// Case Raw array of objects
// Outputs ""

class X
{
    constructor() { printf("C"); }
    destructor    { printf("D"); }
}

int main()
{
    // Just a chunk of uninitialized memory.
    // No constructors, nor destructors will be called
    //  on the elements of the array.
    // Not recommended unless you're developing some
    //  kind of container or know what you're doing.
    // You might need to use the _set_vtable operator
    //  along with it to store only the vtable, so that
    //  function calls work correctly (otherwise the
    //  program will crash)
    X[5] _RAW_ arr;
}

// Case Raw array of primitive types

int main()
{
    int[5] _RAW_ arr;
}


// Case Copy constructing an array
// Outputs "123456789"

int main()
{
    var arr = int[3] {
        int { 1, 2, 3 },
        int { 4, 5, 6 },
        int { 7, 8, 9 }
    };

    // This is a special case
    // Even though the arguments of the array are
    //  used to initialize each element separately,
    //  if the passed argument is a single argument,
    //  and it's of the same array type, then this
    //  copy constructs array form the the argument
    int[3][3] copy(arr);

    for (int i = 0; i < 3; i++)
        for (int j = 0; j < 3; j++)
            printf("%d", copy[i][j]);
}