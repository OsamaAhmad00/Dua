no_mangle int printf(str message, ...);

void print(int num) { printf("%d", num); }


// Case Basic generic function
// Outputs "i64 i32 X "

class X {}

void func<T>() {
    printf("%s ", typename(T));
}

int main()
{
    func<i64>();
    func<i32>();
    func<X>();
}


// Case Empty template parameters list
// Outputs "Hello"

void func<>() {
    printf("Hello");
}

int main()
{
    func<>();
}


// Case Calling a templated function multiple times
// Outputs "i32 i32 i32 "

void func<T>() {
    printf("%s ", typename(T));
}

int main()
{
    func<int>();
    func<int>();
    func<int>();
}


// Case Function with multiple template parameters
// Outputs "i32 i64"

void func<T, U>() {
    printf("%s %s", typename(T), typename(U));
}

int main()
{
    func<int, long>();
}


// Case Same function name with different template params
// Outputs "i32 i32 i64"

void func<T>() {
    printf("%s ", typename(T));
}

void func<T, U>() {
    printf("%s %s", typename(T), typename(U));
}

int main()
{
    func<int>();
    func<int, long>();
}


// Case Templated method
// Outputs "i32 123"

class X
{
    int num = 123;

    void func<T>() {
        printf("%s %d", typename(T), num);
    }
}

int main()
{
    X x;
    x.func<int>();
}


// Case Templated function reference
// Outputs "i32 i64 "

void func<T>() {
    printf("%s ", typename(T));
}

int main()
{
    var x = func<int>;
    var y = func<long>;

    x();
    y();
}


// Case Templated method reference
// Outputs "i32 i64 "

class Z
{
    void func<T>() {
        printf("%s ", typename(T));
    }
}

int main()
{
    Z z;
    var x = z.func<int>;
    var y = z.func<long>;

    x(z);
    y(z);
}


// TODO Case Using the template arg as parameter type
// Outputs "B3 L4"
//
// void print(byte b) { printf("B%d " , (int)b); }
// void print(long l) { printf("L%lld", l); }
//
// void func<T>(T t) {
//     print(t);
// }
//
// int main()
// {
//     func<byte>(3);
//     func<long>(4);
// }

// Case Templated function implicit casting
// Outputs "Hello"

void func<T>(T t) {
    printf("Hello");
}

int main()
{
    func<byte>(1);
}


// Case Templated function overloading
// Outputs "i32 i64"

void func<T>(int i) {
    printf("i32 ");
}

void func<T>(long l) {
    printf("i64");
}

int main()
{
    func<byte>(1I);
    func<byte>(1);
}


// Case Redefinition of the templated function with the same signature
// Panics

void func<T>(int i) {
    printf("i32 ");
}

void func<T>(int i) {
    printf("i32 ");
}

int main()
{
    func<byte>(1);
    func<byte>(1);
}
