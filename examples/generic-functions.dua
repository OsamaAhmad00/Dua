no_mangle int printf(str message, ...);

void print(int num) { printf("%d", num); }


// Case Basic generic function
// Outputs "i64 i32 X "

class X {}

void func<T>() {
    printf("%s ", typename(T));
}

int main()
{
    func<i64>();
    func<i32>();
    func<X>();
}


// Case Empty template parameters list
// Outputs "Hello"

void func<>() {
    printf("Hello");
}

int main()
{
    func<>();
}


// Case Calling a templated function multiple times
// Outputs "i32 i32 i32 "

void func<T>() {
    printf("%s ", typename(T));
}

int main()
{
    func<int>();
    func<int>();
    func<int>();
}


// Case Function with multiple template parameters
// Outputs "i32 i64"

void func<T, U>() {
    printf("%s %s", typename(T), typename(U));
}

int main()
{
    func<int, long>();
}


// Case Same function name with different template params
// Outputs "i32 i32 i64"

void func<T>() {
    printf("%s ", typename(T));
}

void func<T, U>() {
    printf("%s %s", typename(T), typename(U));
}

int main()
{
    func<int>();
    func<int, long>();
}
