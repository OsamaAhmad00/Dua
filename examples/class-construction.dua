nomangle int printf(str message, ...);

void print(int num) { printf("%d", num); }

// Case Initializing a reference type in the constructor
// Outputs "3"

class X
{
    int& num;

    constructor(int& num) : num(num) {}
}

int main()
{
    int n = 2;
    X x(n);
    n = 3;
    printf("%d", x.num);
}


// Case Initializing a reference type in by assigning
// Outputs "4"

int i = 3;

class X
{
    int& num = i;
}

int main()
{
    X x;
    i = 4;
    printf("%d", x.num);
}


// Case Initializing a reference type by default constructor args
// Outputs "4"

int i = 3;

class X
{
    int& num(i);
}

int main()
{
    X x;
    i = 4;
    printf("%d", x.num);
}


// Case Passing a reference field around
// Outputs "123"

class X
{
    int& x;

    constructor(int& x) : x(x) { }

    void func() {
        x = 2;
    }
}

void func(int& value) {
    value = 3;
}

int main()
{
    int num = 1;
    print(num);
    X x(num);
    x.func();
    print(num);
    func(num);
    print(num);
}


// Case Accessing a reference field through self
// Outputs "4"

class X
{
    int& num;

    constructor(int& num) : num(num) { }

    void func() {
        self.num = 4;
    }
}

int main()
{
    int n = 1;
    X x(n);
    x.func();
    print(n);
}


// Case Constructor with parameters call
// Outputs "a1b2c3Aa4b4c4Ba9b8c7CD"

class X
{
    constructor(int a, int b, int c)
    {
        printf("a%db%dc%d", a, b, c);
    }
}

class Y
{
    // No constructor is defined
}

X x(1, 2, 3);

int main()
{
    printf("A");
    X x1(4, 4, 4);
    printf("B");
    X x2(9, 8, 7);
    printf("C");
    Y y;
    printf("D");
}


// Case Destructor call
// Outputs "5X"

class X
{
    int x = 3;
    constructor()
    {
        self.x = 5;
    }

    destructor
    {
        printf("X");
    }
}

class Y
{
    int z;
    constructor(int a, int b) { }

    // No destructor is defined
}

int main()
{
    X x;
    print(x.x);
    Y y(3, 4);
}


// Case Nested constructor calls
// Outputs "562567"

class X
{
    Y y;

    constructor(int i, int j) : y()
    {
        print(i);
        print(j);
    }

}

class Y
{
    constructor()
    {
        print(5);
    }
}

class Z
{
    X x;
    Y y;

    constructor(int i, int j) : x(i, 2), y()
    {
        print(i);
        print(j);
    }
}

int main()
{
    Z z(6, 7);
}


// Case Nested destructor calls
// Outputs "121123121"

class X
{
    Y y;

    destructor
    {
        print(3);
    }
}

class Y
{
    Z z;

    destructor
    {
        print(2);
    }
}

class Z
{
    destructor
    {
        print(1);
    }
}

int main()
{
    { { Y y; } { Z z; } }

    { X x; }
    { Y y; }
    { Z z; }
}


// Case Constructor with primitive types
// Outputs "12"

class X
{
    int i;
    int j;

    constructor(int _i, int _j) : i(_i), j(_j) {}
}

int main()
{
    X x(1, 2);
    print(x.i);
    print(x.j);
}


// Case Initializing a member class with a default value
// Outputs "123"

class X
{
    Y y(1, 2, 3);
}

class Y
{
    constructor(int i, int j, int k)
    {
        print(i);
        print(j);
        print(k);
    }
}

int main()
{
    X x;
}


// Case Initializing a member class, both with a default value, and in the constructor
// Outputs "343"

class X
{
    int x = 3;
    Y y(1, 2);

    constructor() : y(3, 4) { }
}

class Y
{
    constructor(int i, int j) { print(i); print(j); }
}

int main()
{
    X x;
    print(x.x);
}


// Case Order of construction
// Outputs "123"

class X
{
    A a;
    B b;
    C c;
}

class A
{
    constructor() { print(1); }
}

class B
{
    constructor() { print(2); }
}

class C
{
    constructor() { print(3); }
}

int main()
{
    X x;
}


// Case Order of destruction
// Outputs "321"

class X
{
    A a;
    B b;
    C c;
}

class A
{
    destructor { print(1); }
}

class B
{
    destructor { print(2); }
}

class C
{
    destructor { print(3); }
}

int main()
{
    X x;
}
