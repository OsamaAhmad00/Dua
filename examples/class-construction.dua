int printf(str message, ...);

void print(int num) { printf("%d", num); }

// Case Constructor with parameters call
// Outputs "a1b2c3Aa4b4c4Ba9b8c7CD"

class X
{
    constructor(int a, int b, int c)
    {
        printf("a%db%dc%d", a, b, c);
    }
}

class Y
{
    // No constructor is defined
}

X x(1, 2, 3);

int main()
{
    printf("A");
    X x1(4, 4, 4);
    printf("B");
    X x2(9, 8, 7);
    printf("C");
    Y y;
    printf("D");
}


// Case Destructor call
// Outputs "5X"

class X
{
    int x = 3;
    constructor()
    {
        self.x = 5;
    }

    destructor()
    {
        printf("X");
    }
}

class Y
{
    int z;
    constructor(int a, int b) { }

    // No destructor is defined
}

int main()
{
    X x;
    print(x.x);
    Y y(3, 4);
}


// Case Nested constructor calls
// Outputs "562567"

class X
{
    Y y;

    constructor(int i, int j) : y()
    {
        print(i);
        print(j);
    }

}

class Y
{
    constructor()
    {
        print(5);
    }
}

class Z
{
    X x;
    Y y;

    constructor(int i, int j) : x(i, 2), y()
    {
        print(i);
        print(j);
    }
}

int main()
{
    Z z(6, 7);
}


// Case Nested destructor calls
// Outputs "121123121"

class X
{
    Y y;

    destructor()
    {
        print(3);
    }
}

class Y
{
    Z z;

    destructor()
    {
        print(2);
    }
}

class Z
{
    destructor()
    {
        print(1);
    }
}

int main()
{
    { { Y y; } { Z z; } }

    { X x; }
    { Y y; }
    { Z z; }
}


// Case Constructor with primitive types
// Outputs "12"

class X
{
    int i;
    int j;

    constructor(int _i, int _j) : i(_i), j(_j) {}
}

int main()
{
    X x(1, 2);
    print(x.i);
    print(x.j);
}