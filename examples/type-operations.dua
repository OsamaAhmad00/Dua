nomangle int printf(str message, ...);

void print(double d) { printf("%.2lf", d); }


// CASE Pointer Comparison
// Outputs "111"

int main()
{
    int* i = 2324;
    float* f = 2324;

    int b1 = i == f;

    printf("%d%d%d", b1, b1, b1);
}


// CASE Integer Addition
// Returns 5

int main()
{
    int i = 2;
    long j = 3;
    return i + j;
}


// CASE Integer Subtraction
// Returns -1

int main()
{
    int i = 2;
    long j = 3;
    return i - j;
}


// CASE Integer Multiplication
// Returns 6

int main()
{
    int i = 2;
    long j = 3;
    return i * j;
}


// CASE Integer Division
// Returns 3

int main()
{
    int i = 10;
    long j = 3;
    return i / j;
}


// CASE Integer Mod
// Returns 1

int main()
{
    int i = 10;
    long j = 3;
    return i % j;
}


// CASE Integer Post Increment
// Returns 21

int main()
{
    int i = 10;
    long j = i++ + i;
    return j;
}


// CASE Integer Post Decrement
// Returns 19

int main()
{
    int i = 10;
    long j = i-- + i;
    return j;
}


// CASE Integer Pre Increment
// Returns 22

int main()
{
    int i = 10;
    long j = ++i + i;
    return j;
}


// CASE Integer Pre Decrement
// Returns 18

int main()
{
    int i = 10;
    long j = --i + i;
    return j;
}


// CASE Integer Identity
// Returns 2

int main()
{
    int i = 2;
    return +i;
}


// CASE Integer Negation
// Returns -2

int main()
{
    int i = 2;
    return -i;
}


// CASE Integer Not
// Returns 0

int main()
{
    int i = 2;
    return !i;
}


// CASE Integer Bitwise Complement
// Returns -3

int main()
{
    int i = 2;
    return ~i;
}


// CASE Integer Left Shift
// Returns 20

int main()
{
    int i = 5;
    int j = 2;
    return i << j;
}


// CASE Integer Right Shift
// Returns 5

int main()
{
    int i = 20;
    long j = 2;
    return i >> j;
}


// CASE Integer Arithmetic Right Shift
// Returns -5

int main()
{
    int i = -20;
    long j = 2;
    return i >>> j;
}


// CASE Integer Less Than
// Returns 1

int main()
{
    int i = 2;
    long j = 3;
    return i < j;
}


// CASE Integer Greater Than
// Returns 0

int main()
{
    int i = 2;
    long j = 3;
    return i > j;
}


// CASE Integer Less Then or Equal
// Returns 1

int main()
{
    int i = 2;
    long j = 3;
    return i <= j;
}


// CASE Integer Greater Than or Equal
// Returns 0

int main()
{
    int i = 2;
    long j = 3;
    return i >= j;
}


// CASE Integer Equality
// Returns 0

int main()
{
    int i = 2;
    long j = 3;
    return i == j;
}


// CASE Integer Not Equal
// Returns 1

int main()
{
    int i = 2;
    long j = 3;
    return i != j;
}


// CASE Integer Bitwise And
// Returns 2

int main()
{
    int i = 2;
    long j = 3;
    i & j;  // This should not be parsed as i& j (i reference)
    return i & j;
}


// CASE Integer Xor
// Returns 1

int main()
{
    int i = 2;
    long j = 3;
    return i ^ j;
}


// CASE Integer Bitwise Or
// Returns 3

int main()
{
    int i = 2;
    long j = 3;
    return i | j;
}


// CASE Integer Logical And
// Returns 1

int main()
{
    int i = 2;
    long j = 3;
    return i && j;
}


// CASE Integer Logical Or
// Returns 1

int main()
{
    int i = 2;
    long j = 3;
    return i || j;
}


// CASE Float Addition
// Outputs "5.40"

int main()
{
    double d = 3.1;
    float f = 2.3;
    print(d + f);
}


// CASE Float Addition
// Outputs "5.40"

int main()
{
    double d = 3.1;
    float f = 2.3;
    print(d + f);
}


// CASE Float Subtraction
// Outputs "1.20"

int main()
{
    double d = 3.3;
    float f = 2.1;
    print(d - f);
}


// CASE Float Multiplication
// Outputs "7.13"

int main()
{
    double d = 3.1;
    float f = 2.3;
    print(d * f);
}


// CASE Float Division
// Outputs "1.35"

int main()
{
    double d = 3.1;
    float f = 2.3;
    print(d / f);
}


// CASE Float Mod
// Outputs "0.30"

int main()
{
    double d = 5.1;
    float f = 2.4;
    print(d % f);
}


// CASE Float Identity
// Outputs "3.10"

int main()
{
    double d = 3.1;
    print(+d);
}


// CASE Float Negation
// Outputs "-3.10"

int main()
{
    double d = 3.1;
    print(-d);
}


// CASE Float Not
// Panics

int main()
{
    double d = 3.1;
    print(!d);
}


// CASE Float Less Than
// Returns 0

int main()
{
    double d = 3.1;
    float f = 2.3;
    return d < f;
}


// CASE Float Greater Than
// Returns 1

int main()
{
    double d = 3.1;
    float f = 2.3;
    return d > f;
}


// CASE Float Less Than or Equal
// Returns 0

int main()
{
    double d = 3.1;
    float f = 2.3;
    return d <= f;
}


// CASE Float Greater Than or Equal
// Returns 1

int main()
{
    double d = 3.1;
    float f = 2.3;
    return d >= f;
}


// CASE Float Equality
// Returns 0

int main()
{
    double d = 3.1;
    float f = 2.3;
    return d == f;
}


// CASE Float Not Equal
// Returns 1

int main()
{
    double d = 3.1;
    float f = 2.3;
    return d != f;
}


// CASE Float Logical And
// Returns 1

int main()
{
    double d = 3.1;
    float f = 2.3;
    return d && f;
}


// CASE Float Logical Or
// Returns 1

int main()
{
    double d = 3.1;
    float f = 2.3;
    return d || f;
}


// CASE Float Post Increment;
// Panics

int main()
{
    double d = 3.1;
    d++;
}


// CASE Float Post Decrement
// Panics

int main()
{
    double d = 3.1;
    d--;
}


// CASE Float Pre Increment
// Panics

int main()
{
    double d = 3.1;
    ++d;
}


// CASE Float Pre Decrement
// Panics

int main()
{
    double d = 3.1;
    --d;
}


// CASE Float Bitwise Complement
// Panics

int main()
{
    double d = 3.1;
    ~d;
}



// CASE Float Left Shift
// Panics

int main()
{
    double d = 3.1;
    d << 1;
}



// CASE Float Right Shift
// Panics

int main()
{
    double d = 3.1;
    d >> 2;
}



// CASE Float Arithmetic Right Shift
// Panics

int main()
{
    double d = 3.1;
    d >>> 2;
}



// CASE Float Bitwise And
// Panics

int main()
{
    double d = 3.1;
    d & d;
}



// CASE Float Xor
// Panics

int main()
{
    double d = 3.1;
    d ^ d;
}



// CASE Float Bitwise Or
// Panics

int main()
{
    double d = 3.1;
    d | d;
}


// Some mixed operations


// CASE Int Float Less Than
// Returns 0

int main()
{
    double d = 3.1;
    int i = 2;
    return d < i;
}


// CASE Int Float Addition
// Outputs "8.10"

int main()
{
    double d = 3.1;
    long l = 5;
    print(d + l);
}


// CASE Float Int Division
// Outputs "3.33"

int main()
{
    double d = 10;
    short s = 3;
    print(d / s);
}


// CASE Int Float Division
// Outputs "3.33"

int main()
{
    int i = 10;
    float f = 3;
    print(i / f);
}