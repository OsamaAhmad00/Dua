import "../lib/vector.dua"

nomangle int printf(str message, ...);

// Case Pushing an element

int main()
{
    Vector<int> v;
    v.push(4);
}


// Case Popping an element
// Outputs "4"

int main()
{
    Vector<int> v;
    v.push(4);
    printf("%d\n", v.pop());
}


// Case Expanding
// Outputs "2 4 8 16 32 64 128 256 512 1024 \n"

int main()
{
    Vector<int> v;

    int c = 0;

    int n = 1000;

    for (int i = 0; i < n; i++)
    {
        if (v.size() != i)
            printf("Wrong size: %d\n", v.size());

        if (c != v.capacity()) {
            c = v.capacity();
            printf("%d ", c);
        }

        v.push(i);
    }

    for (int i = 0; i < n; i++) {
        if (v[i] != i) {
            printf("Wrong value (%d) at index %d %p %p\n", v[i], i, &v[i], &i);
        }
    }
}


// Case Trimming
// Outputs "5 4 3 2 1 "

int main()
{
    Vector<int> v;

    int n = 5;

    for (int i = 0; i < n; i++)
    {
        if (v.size() != i)
            printf("Wrong size: %d\n", v.size());
        v.push(i);
    }

    v.trim_to_fit();
    for (int i = 0; i < n; i++)
    {
        printf("%d ", v.capacity());

        v.pop();
        v.trim_to_fit();
    }
}


// Case Resizing
// Outputs "10"

int main()
{
    Vector<int> v;
    v.resize(10);
    printf("%d", v.size());
}


// Case Reserving
// Outputs "10 0"

int main()
{
    Vector<int> v;
    v.reserve(10);
    printf("%d %d", v.capacity(), v.size());
}


// Case Popping an empty vector
// Returns -1

int main()
{
    Vector<double> v;
    v.pop();
}


// Case Using a negative index
// Returns -1

int main()
{
    Vector<double> v;
    v[-3];
}


// Case Using an index bigger than size
// Returns -1

int main()
{
    Vector<double> v;
    v.push(1);
    v.push(2);
    v.push(3);
    v[5];
}


// Case Assigning a vector to another
// Outputs "12312345"

int main()
{
    Vector<int> v1;
    v1.push(1);
    v1.push(2);
    v1.push(3);
    v1.push(4);
    v1.push(5);

    Vector<int> v2 = v1;

    v1.pop();
    v1.pop();

    for (int i = 0; i < v1.size(); i++)
        printf("%d", v1[i]);
    for (int i = 0; i < v2.size(); i++)
        printf("%d", v2[i]);
}


// Case Chain assignment of vectors
// Outputs "1121231234"

int main()
{
    Vector<int> v1;
    Vector<int> v2;
    Vector<int> v3;
    Vector<int> v4;

    v1.push(1);
    v4 = v3 = v2 = v1;

    v2.push(2);
    v4 = v3 = v2;

    v3.push(3);
    v4 = v3;

    v4.push(4);

    for (int i = 0; i < v1.size(); i++)
        printf("%d", v1[i]);
    for (int i = 0; i < v2.size(); i++)
        printf("%d", v2[i]);
    for (int i = 0; i < v3.size(); i++)
        printf("%d", v3[i]);
    for (int i = 0; i < v4.size(); i++)
        printf("%d", v4[i]);
}


// Case Self-assignment
// Outputs "1 2 3 4 5 "

int main()
{
    Vector<int> v;
    v.push(1);
    v.push(2);
    v.push(3);
    v.push(4);
    v.push(5);
    v = v;
    for (int i = 0; i < v.size(); i++)
        printf("%d ", v[i]);
}


// Case Sorting in an ascending order
// Outputs "12345"

int main()
{
    Vector<int> v;
    v.push(3);
    v.push(1);
    v.push(2);
    v.push(5);
    v.push(4);

    v.sort_ascending();

    for (int i = 0; i < 5; i++)
        printf("%d", v[i]);
}


// Case Sorting in a descending order
// Outputs "54321"

int main()
{
    Vector<int> v;
    v.push(3);
    v.push(1);
    v.push(2);
    v.push(5);
    v.push(4);

    v.sort_descending();

    for (int i = 0; i < 5; i++)
        printf("%d", v[i]);
}


// Case Shuffling

int main()
{
    // Even though a constant seed is used here, the
    // output is not guaranteed across different platforms.
    Vector<int> v;
    v.push(3);
    v.push(1);
    v.push(2);
    v.push(5);
    v.push(4);

    set_random_seed(5);
    v.shuffle();

    for (int i = 0; i < 5; i++)
        printf("%d", v[i]);
}

