import "../lib/priority-queue.dua"

// A quick hack to replace the extern variable
//  to avoid both compilation and linking errors
int __ = { untrack(__IS_RANDOM_SEED_SET); 0 };
bool __IS_RANDOM_SEED_SET = false;

nomangle int printf(str message, ...);


// Case Sorting numbers in an ascending order
// Outputs "12345"

int main()
{
    MinPriorityQueue<int> q;
    q.insert(5);
    q.insert(2);
    q.insert(4);
    q.insert(1);
    q.insert(3);

    while (!q.is_empty()) {
        printf("%d", q.pop());
    }
}


// Case Sorting numbers in a descending order
// Outputs "54321"

int main()
{
    MaxPriorityQueue<int> q;
    q.insert(5);
    q.insert(2);
    q.insert(4);
    q.insert(1);
    q.insert(3);

    while (!q.is_empty()) {
        printf("%d", q.pop());
    }
}


// Case Using a custom comparator
// Outputs "123"

class Integer
{
    int num;
    constructor(int num) : num(num) { }
    constructor() { }
}

class Comparator
{
    int compare(Integer& a, Integer& b) {
        return a.num - b.num;
    }
}

int main()
{
    PriorityQueue<Integer, Comparator> p;
    p.insert((3)Integer);
    p.insert((2)Integer);
    p.insert((1)Integer);
    printf("%d%d%d", p.pop().num, p.pop().num, p.pop().num);
}
