nomangle int printf(str message, ...);

void print(int n) { printf("%d", n); }


// Case Primitive type allocation
// Outputs "3"

int main()
{
    var x = new int;
    *x = 3;
    printf("%d", *x);
    delete x;
}


// Case Array allocation
// Outputs "0123456789"

int main()
{
    var arr = new int[10];

    for (int i = 0; i < 10; i++)
        (*arr)[i] = i;

    for (int i = 0; i < 10; i++)
        print((*arr)[i]);

    delete arr;
}


// Case Object allocation
// Outputs "Hello123Bye"

class X
{
    int num;

    constructor(int i)
    {
        printf("Hello");
        print(i);
    }

    destructor
    {
        printf("Bye");
    }
}

int main()
{
    X* x = new X(1);
    x->num = 23;
    print(x->num);
    delete x;
}


// Case Allocating multiple primitive types
// Outputs "00000"

int main()
{
    var arr = new[5] int;
    for (int i = 0; i < 5; i++)
        print(arr[i]);
    delete[] arr;
}


// Case Allocating multiple objects
// Outputs "HelloHelloHello"

class X
{
    constructor() { printf("Hello"); }
}

int main()
{
    var arr = new[3] X;
    delete[] arr;
}


// Case Allocating multiple objects with constructor params
// Outputs "55555"

class X
{
    int i;
    constructor(int i) : i(i) { }
}

int main()
{
    var arr = new[5] X(5);

    for (int i = 0; i < 5; i++)
        print(arr[i].i);

    delete[] arr;
}


// Case Destructor calls with delete[]
// Outputs "12345"

int c = 1;

class G
{
    int i;

    constructor() : i(c++) { }

    destructor { printf("%d", i); }
}

int main()
{
    var arr = new[5] G;
    delete[] arr;
}


// Case Allocating objects array without calling constructors
// Outputs ""

class X
{
    constructor() { printf("X"); }
}

int main()
{
    var arr = _RAW_ new[10] X;
    // The objects are not initialized, and
    //  the vtable is not correctly set. We
    //  need to not call the destructors
    _RAW_ delete[] arr;
}


// Case Deleting objects array without calling destructors
// Outputs ""

class X
{
    destructor { printf("X"); }
}

int main()
{
    var arr = new[10] X;
    _RAW_ delete[] arr;
}


// Case Passing null to delete

int main()
{
    delete null;
}


// Case Passing null to delete[]

int main()
{
    delete[] null;
}