nomangle int printf(str message, ...);


class X
{
    int i;

    constructor(int i) : i(i) { printf("C%d", i); }

    =constructor(X& x) { i = x.i; printf("CC%d", i); }

    void func() { printf("F%d", i); }

    destructor { printf("D%d", i); }
}


// Case Temp int
// Outputs "3"

int main()
{
    // Primitive types can be created the same
    //  way temporary objects are created, but
    //  this is useless since it's equivalent
    //  to the expression "3".
    printf("%d", (3)int);
}


// Case Temp int reference
// Outputs "3"

int main()
{
    int i = 3;
    printf("%d", (i)int&);
}


// Case Temp object expression statement
// Outputs "C3D3"

int main()
{
    (3)X;
}


// Case Calling a method from a temp object
// Outputs "C5F5D5"

int main()
{
    (5)X.func();
}


// Case Passing a temp object by value to a function
// Outputs "Before Call\nC5F5D5\nAfter Call\n"

void func(X x)
{
    x.func();
}

int main()
{
    printf("Before Call\n");
    // The temp variable gets created here, teleports to
    //  the function scope, and gets destroyed there.
    func((5)X);
    printf("\nAfter Call\n");
}


// Case Passing a temp object by reference to a function
// Outputs "Before Call\nC5F5D5\nAfter Call\n"

void func(X& x)
{
    x.func();
}

int main()
{
    printf("Before Call\n");
    // The temp variable gets created here, doesn't teleport
    //  because the function takes a reference, so the variable
    //  gets destroyed here.
    func((5)X);
    printf("\nAfter Call\n");
}


// Case Variable definition init by temp value
// Outputs "3"

int main()
{
    int i = (3)int;
    printf("%d", i);
}


// Case Variable definition init by temp object
// Outputs "C6D6"

int main()
{
    X x = (6)X;
}


// Case Unbound temp variable destruction
// Outputs "Before\nC5D5\nAfter\n"

int main()
{
    printf("Before\n");
    // This temp object is unbound to a variable
    //  (a local variable or a parameter). It'll
    //  be destructed by the end of the current
    //  statement.
    (5)X;
    printf("\nAfter\n");
}


// Case Assigning temp object to a class field
// Outputs "C1C212D2D1"

class Y
{
    X x1 = (1)X;
    X x2((2)X);
}

int main()
{
    Y y;
    printf("%d%d", y.x1.i, y.x2.i);
}


// Case Ignored object-returning function call
// Outputs "C5CC5D5D5Y"

X func()
{
    X x(5);
    // The return value is not moved. This will be copied,
    //  and the local x will be destructed. Then, the copy
    //  at the caller scope will be destructed as well.
    return x;
}

int main()
{
    func();
    printf("Y");
}


// Case Ignored object-returning block expression
// Outputs "C5CC5D5D5Y"

int main()
{
    {
        X x(5);
        // The return value is not moved. This will be copied,
        //  and the local x will be destructed. Then, the copy
        //  at the outer scope will be destructed as well.
        x
    };
    printf("Y");
}


// Case Ignored object-returning if expression
// Outputs "C5CC5D5D5Y"

int main()
{
    if (true) {
        X x(5);
        // The return value is not moved. This will be copied,
        //  and the local x will be destructed. Then, the copy
        //  at the outer scope will be destructed as well.
        x
    } else {
        X x(3);
        x
    };
    printf("Y");
}


// Case Ignored object-returning when expression
// Outputs "C5CC5D5D5Y"

int main()
{
    when {
        true -> {
            X x(5);
            // The return value is not moved. This will be copied,
            //  and the local x will be destructed. Then, the copy
            //  at the outer scope will be destructed as well.
            x
        },
        else -> {
            X x(3);
            x
        }
    };
    printf("Y");
}


// Case Ignored moved object-returning function call
// Outputs "C5D5Y"

X func()
{
    X x(5);
    return move(x);
}

int main()
{
    func();
    printf("Y");
}


// Case Ignored moved object-returning block expression
// Outputs "C5D5Y"

int main()
{
    {
        X x(5);
        move(x)
    };
    printf("Y");
}


// Case Ignored moved object-returning if expression
// Outputs "C5D5Y"

int main()
{
    if (true) {
        X x(5);
        move(x)
    } else {
        X x(3);
        x
    };
    printf("Y");
}


// Case Ignored moved object-returning when expression
// Outputs "C5D5Y"

int main()
{
    when {
        true -> {
            X x(5);
            move(x)
        },
        else -> {
            X x(3);
            x
        }
    };
    printf("Y");
}
