import "../lib/string.dua"

nomangle int printf(str message, ...);


// Case Simple string
// Outputs "Hello world"

int main()
{
    String s("Hello world");
    printf("%s", s.c_str());
    s.delete_buffer();
}


// Case String concatenation with byte*
// Outputs "Hello world"

int main()
{
    String s("Hello");
    var c = s + " world";
    printf("%s", c.c_str());
    s.delete_buffer();
    c.delete_buffer();
}


// Case byte* concatenation with String
// Outputs "Hello world"

int main()
{
    String s("world");
    var c = "Hello " + s;
    printf("%s", c.c_str());
    s.delete_buffer();
    c.delete_buffer();
}


// Case String concatenation with String
// Outputs "Hello world"

int main()
{
    String s1("Hello ");
    String s2("world");
    var c = s1 + s2;
    printf("%s", c.c_str());
    s1.delete_buffer();
    s2.delete_buffer();
    c.delete_buffer();
}


// Case Concatenation using compound assignment
// Outputs "Hello there you're welcome"

int main()
{
    String s("Hello");
    var c = s + " there";
    // FIXME these lines leak memory because a
    //  temporary String object is created, then
    //  assigned to c, and the old c object
    //  disappears without deleting its buffer
    c += " you're";
    c += " welcome";
    printf("%s", c.c_str());
}


// Case Substring
// Outputs "Hello world"

int main()
{
    String s("Hello Hello world world");
    var substr = s.substring(6, 17);
    printf("%s", substr.c_str());
    s.delete_buffer();
    substr.delete_buffer();
}