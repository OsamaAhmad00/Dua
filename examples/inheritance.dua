nomangle int printf(str message, ...);

class X
{
    void print() {
        printf("X");
    }
}

class Y extends X
{
    void print() {
        printf("Y");
    }
}


// Case Basic method overriding
// Outputs "Y"

int main()
{
    Y y;
    X& x = y;
    x.print();
}


// Case Passing as a parent reference
// Outputs "Y"

void func(X& x) {
    x.print();
}

int main()
{
    Y y;
    func(y);
}


// Case Inheriting a method
// Outputs "X"

class Z extends X
{

}

int main()
{
    Z z;
    z.print();
}


// Case Calling a method of a parent class
// Outputs "X"

int main()
{
    Y y;
    X::print(y);
}


// Case Inheriting from a templated class
// Outputs "i32"

class G<T>
{
    void print() {
        printf("%s", typename(T));
    }
}

class H extends G<int> {}

int main()
{
    H h;
    h.print();
}


// Case Passing a template parameter as a template arg to the parent
// Outputs "i32"

class G<T>
{
    void print() {
        printf("%s", typename(T));
    }
}

class H<T> extends G<T> {}

int main()
{
    H<int> h;
    h.print();
}


// Case Nesting a template parameter as a parent template arg
// Returns 1

class G<T>
{
    bool func() { return istype(T, G<G<int> >); }
}

// Here, a >>> will be confused with the >>> operator
class H<T> extends G<G<G<T> > > {}

int main()
{
    H<int> h;
    return h.func();
}


