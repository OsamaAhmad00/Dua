nomangle int printf(str message, ...);

class X
{
    void print() {
        printf("X");
    }
}

class Y extends X
{
    void print() {
        printf("Y");
    }
}


// Case Basic method overriding
// Outputs "Y"

int main()
{
    Y y;
    X& x = y;
    x.print();
}


// Case Passing as a parent reference
// Outputs "Y"

void func(X& x) {
    x.print();
}

int main()
{
    Y y;
    func(y);
}


// Case Inheriting a method
// Outputs "X"

class Z extends X
{

}

int main()
{
    Z z;
    z.print();
}


// Case Calling a method of a parent class
// Outputs "X"

int main()
{
    Y y;
    X::print(y);
}


// Case Inheriting from a templated class
// Outputs "i32"

class G<T>
{
    void print() {
        printf("%s", typename(T));
    }
}

class H extends G<int> {}

int main()
{
    H h;
    h.print();
}


// Case Passing a template parameter as a template arg to the parent
// Outputs "i32"

class G<T>
{
    void print() {
        printf("%s", typename(T));
    }
}

class H<T> extends G<T> {}

int main()
{
    H<int> h;
    h.print();
}


// Case Nesting a template parameter as a parent template arg
// Outputs "10"

class G<T>
{
    int func() { return istype(T, G<G<int>>); }
}

class H<T> extends G<G<G<T>>> {}

class L<T> extends G<G<G<G<G<G<G<T>>>>>>> {}

int main()
{
    H<int> h;
    L<int> l;

    printf("%d%d", h.func(), l.func());
}


// Case Specifying both a parent and a packing option
// Panics

// The packing option is inherited from the parent as well

class G packed extends X { }

int main() { }


// Case Inheriting the packing option
// Outputs "13 16 18 24"

class A packed
{
    int i;
    byte c;
}

class B
{
    int i;
    byte c;
}

class C extends A
{
    int ii;
    byte cc;
}

class D extends B
{
    int ii;
    byte cc;
}

int main()
{
    printf("%d %d %d %d", sizeof(A), sizeof(B), sizeof(C), sizeof(D));
}


// Case Repeating a field
// Panics

class G
{
    int i;
    int i;
}

int main() { }


// Case Field with the same name as a parent field
// Panics

class G
{
    int i;
}

class H extends G
{
    int i;
}

int main() { }


// Case Accessing a field of a parent
// Outputs "3"

class G
{
    int i = 3;
}

class H extends G
{
    void func() {
        printf("%d", i);
    }
}

int main()
{
    H h;
    h.func();
}


// Case Accessing a templated parent field
// Outputs "i32 i64"

class G<T>
{
    T i;
}

class A extends G<int>
{
    void print() {
        printf("%s ", typename(i));
    }
}

class B extends G<long>
{
    void print() {
        printf("%s", typename(i));
    }
}

int main()
{
    A a;
    B b;
    a.print();
    b.print();
}


// Case Overloading a parent class method
// Outputs "03"

class G
{
    int i = 3;

    void func(int i) {
        printf("%d", (int)(self.i == i));
    }
}

class H extends G
{
    void func() {
        printf("%d", i);
    }
}

int main()
{
    H h;

    h.func(4);
    h.func();
}


// Case Calling a method that accesses a field from a parent reference
// Outputs "3"

class G
{
    void func() {
        printf("0");
    }
}

class H extends G
{
    int i = 3;
    void func() {
        printf("%d", i);
    }
}

int main()
{
    H h;
    G& g = h;
    g.func();
}